defmodule SelfSustaining.Repo.Migrations.CreateAiTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:aps_processes, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:process_id, :text, null: false)
      add(:name, :text, null: false)
      add(:description, :text)
      add(:current_stage, :text, null: false, default: "PM_Agent")
      add(:assigned_agent, :text)
      add(:status, :text, null: false, default: "pending")
      add(:aps_content, :map, null: false)
      add(:metadata, :map, default: %{})

      add(:created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      unique_index(:aps_processes, [:process_id], name: "aps_processes_unique_process_id_index")
    )

    create table(:aps_agent_assignments, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:session_id, :text, null: false)
      add(:agent_role, :text, null: false)

      add(
        :process_id,
        references(:aps_processes,
          column: :process_id,
          name: "aps_agent_assignments_process_id_fkey",
          type: :text,
          prefix: "public"
        )
      )

      add(:status, :text, null: false, default: "active")
      add(:claimed_at, :utc_datetime)
      add(:completed_at, :utc_datetime)
      add(:estimated_completion, :utc_datetime)
      add(:metadata, :map, default: %{})

      add(:created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      unique_index(:aps_agent_assignments, [:session_id],
        name: "aps_agent_assignments_unique_session_index"
      )
    )

    create table(:ai_tasks, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:description, :text)
      add(:type, :text, default: "analysis")
      add(:status, :text, default: "pending")
      add(:priority, :text, default: "medium")
      add(:progress, :bigint, default: 0)
      add(:context, :map, default: %{})
      add(:result, :map)
      add(:error, :text)
      add(:logs, {:array, :map}, default: [])
      add(:started_at, :utc_datetime)
      add(:completed_at, :utc_datetime)
      add(:estimated_duration, :bigint)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:improvement_id, :uuid)
    end

    create table(:ai_metrics, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:category, :text, default: "performance")
      add(:value, :decimal, null: false)
      add(:unit, :text, default: "count")
      add(:tags, :map, default: %{})
      add(:metadata, :map, default: %{})
      add(:recorded_at, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:improvement_id, :uuid)
      add(:task_id, :uuid)
    end

    create table(:ai_improvements, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:ai_tasks) do
      modify(
        :improvement_id,
        references(:ai_improvements,
          column: :id,
          name: "ai_tasks_improvement_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:ai_metrics) do
      modify(
        :improvement_id,
        references(:ai_improvements,
          column: :id,
          name: "ai_metrics_improvement_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :task_id,
        references(:ai_tasks,
          column: :id,
          name: "ai_metrics_task_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:ai_improvements) do
      add(:title, :text, null: false)
      add(:description, :text, null: false)
      add(:rationale, :text)
      add(:implementation_plan, :text)
      add(:risk_assessment, :text)
      add(:confidence, :bigint, default: 50)
      add(:impact, :text, default: "medium")
      add(:effort, :text, default: "medium")
      add(:status, :text, default: "proposed")
      add(:category, :text)
      add(:affected_files, {:array, :text}, default: [])
      add(:code_changes, :text)
      add(:test_plan, :text)
      add(:rollback_plan, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:full_text_vector, :vector, size: 1536)
    end

    create table(:ai_code_analyses, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:file_path, :text, null: false)
      add(:analysis_type, :text, default: "quality")
      add(:score, :bigint)
      add(:issues, {:array, :map}, default: [])
      add(:suggestions, {:array, :map}, default: [])
      add(:metrics, :map, default: %{})
      add(:code_snippet, :text)
      add(:ai_summary, :text)
      add(:confidence, :bigint, default: 80)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:full_text_vector, :vector, size: 1536)
    end
  end

  def down do
    drop(table(:ai_code_analyses))

    alter table(:ai_improvements) do
      remove(:full_text_vector)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:rollback_plan)
      remove(:test_plan)
      remove(:code_changes)
      remove(:affected_files)
      remove(:category)
      remove(:status)
      remove(:effort)
      remove(:impact)
      remove(:confidence)
      remove(:risk_assessment)
      remove(:implementation_plan)
      remove(:rationale)
      remove(:description)
      remove(:title)
    end

    drop(constraint(:ai_metrics, "ai_metrics_improvement_id_fkey"))

    drop(constraint(:ai_metrics, "ai_metrics_task_id_fkey"))

    alter table(:ai_metrics) do
      modify(:task_id, :uuid)
      modify(:improvement_id, :uuid)
    end

    drop(constraint(:ai_tasks, "ai_tasks_improvement_id_fkey"))

    alter table(:ai_tasks) do
      modify(:improvement_id, :uuid)
    end

    drop(table(:ai_improvements))

    drop(table(:ai_metrics))

    drop(table(:ai_tasks))

    drop_if_exists(
      unique_index(:aps_agent_assignments, [:session_id],
        name: "aps_agent_assignments_unique_session_index"
      )
    )

    drop(constraint(:aps_agent_assignments, "aps_agent_assignments_process_id_fkey"))

    drop(table(:aps_agent_assignments))

    drop_if_exists(
      unique_index(:aps_processes, [:process_id], name: "aps_processes_unique_process_id_index")
    )

    drop(table(:aps_processes))
  end
end
