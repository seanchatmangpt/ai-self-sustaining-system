defmodule MyApp.ExampleValidator do
  @moduledoc """
  Example validator using the generated Validator DSL

  This follows the Spark tutorial pattern exactly.
  """

  use MyApp.Validator

  def validate_age(age) when is_integer(age) and age >= 0 and age <= 120, do: true
  def validate_age(_), do: false

  def capitalize_name(name) when is_binary(name), do: String.capitalize(name)
  def capitalize_name(name), do: name

  fields do
    field :name, :string do
      transform(&capitalize_name/1)
    end

    field :age, :integer do
      check(&validate_age/1)
    end

    field(:email, :string)
  end

  # The validate/1 function would be generated by the GenerateValidate transformer
  # For now, let's manually implement it to test the concept
  def validate(data) do
    fields = Spark.Dsl.Extension.get_entities(__MODULE__, [:fields])

    Enum.reduce_while(fields, {:ok, %{}}, fn field, {:ok, acc} ->
      value = Map.get(data, field.name)

      # Apply transform if present
      transformed_value =
        if field.transform do
          field.transform.(value)
        else
          value
        end

      # Apply check if present
      if field.check && not field.check.(transformed_value) do
        {:halt, {:error, "#{field.name} validation failed"}}
      else
        {:cont, {:ok, Map.put(acc, field.name, transformed_value)}}
      end
    end)
  end
end
