# Engineering Elixir Applications v2 - Advanced Kubernetes Configuration
# Demonstrates modern cloud-native patterns for Elixir/Phoenix applications

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: elixir-app
  version: "2.0.0"
  
# Image configuration  
image:
  registry: docker.io
  repository: yourorg/elixir-app
  tag: "2.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  annotations:
    # Prometheus scraping
    prometheus.io/scrape: "true"
    prometheus.io/port: "4000"
    prometheus.io/path: "/metrics"
    
  labels:
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: elixir-app
    
# Pod configuration
pod:
  annotations:
    # Istio sidecar injection
    sidecar.istio.io/inject: "true"
    # Custom annotations for observability
    observability.elixir.app/telemetry: "enabled"
    
  labels:
    version: v2
    environment: production
    
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
    
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values: [elixir-app]
          topologyKey: kubernetes.io/hostname

# Container configuration
container:
  name: elixir-app
  port: 4000
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "1000m"
      
  livenessProbe:
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    httpGet:
      path: /ready
      port: 4000
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    
  startupProbe:
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 30

# Environment variables
env:
  # Application configuration
  PHX_HOST: "elixir-app.yourdomain.com"
  PORT: "4000"
  MIX_ENV: "prod"
  
  # Database configuration (from secrets)
  DATABASE_URL:
    valueFrom:
      secretKeyRef:
        name: elixir-app-secrets
        key: database-url
        
  # Secret key base (from secrets)
  SECRET_KEY_BASE:
    valueFrom:
      secretKeyRef:
        name: elixir-app-secrets
        key: secret-key-base
        
  # Clustering configuration for Distributed Erlang
  ERLANG_COOKIE:
    valueFrom:
      secretKeyRef:
        name: elixir-app-secrets
        key: erlang-cookie
        
  # OpenTelemetry configuration
  OTEL_SERVICE_NAME: "elixir-app"
  OTEL_SERVICE_VERSION: "2.0.0"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger-collector:14268"
  
  # Redis configuration
  REDIS_URL: "redis://elixir-app-redis:6379"
  
  # Feature flags
  ENABLE_ASH_ADMIN: "true"
  ENABLE_GRAPHQL: "true"
  ENABLE_AI_FEATURES: "true"

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 4000
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    
  hosts:
    - host: elixir-app.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
          
  tls:
    - secretName: elixir-app-tls
      hosts:
        - elixir-app.yourdomain.com

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60

# Vertical Pod Autoscaler
vpa:
  enabled: false
  updatePolicy:
    updateMode: "Auto"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# ServiceMonitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  labels:
    app: elixir-app
    release: prometheus

# NetworkPolicy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 4000
  egress:
    - to:
      - namespaceSelector:
          matchLabels:
            name: database
      ports:
      - protocol: TCP
        port: 5432

# Secrets configuration
secrets:
  create: true
  data:
    database-url: "postgresql://user:password@postgresql:5432/elixir_app_prod"
    secret-key-base: "your-secret-key-base-here"
    erlang-cookie: "your-erlang-cookie-here"

# ConfigMap configuration
configMap:
  create: true
  data:
    app.config: |
      # Elixir application configuration
      config :elixir_app, ElixirAppWeb.Endpoint,
        url: [host: "elixir-app.yourdomain.com", port: 443, scheme: "https"],
        check_origin: false,
        secret_key_base: {:system, "SECRET_KEY_BASE"}
        
      config :elixir_app, ElixirApp.Repo,
        url: {:system, "DATABASE_URL"},
        pool_size: 10
        
      config :opentelemetry,
        service: [name: "elixir-app", version: "2.0.0"]

# PostgreSQL dependency configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres-password"
    database: "elixir_app_prod"
  primary:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

# Redis dependency configuration
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 5Gi
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"

# Prometheus monitoring
prometheus:
  enabled: true
  server:
    retention: "30d"
    persistentVolume:
      enabled: true
      size: 20Gi

# Grafana dashboards
grafana:
  enabled: true
  admin:
    existingSecret: grafana-admin-secret
  persistence:
    enabled: true
    size: 5Gi
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'elixir-dashboards'
        folder: 'Elixir Applications'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/elixir
  dashboards:
    elixir-dashboards:
      elixir-app-overview:
        url: https://raw.githubusercontent.com/yourorg/grafana-dashboards/main/elixir-app-overview.json
      phoenix-liveview-metrics:
        url: https://raw.githubusercontent.com/yourorg/grafana-dashboards/main/phoenix-liveview.json

# Distributed Erlang clustering
clustering:
  enabled: true
  strategy: "kubernetes"
  namespace: "default"
  
  # Service for Erlang distribution
  distributionService:
    enabled: true
    type: ClusterIP
    port: 9100
    
  # EPMD service
  epmdService:
    enabled: true
    type: ClusterIP
    port: 4369

# Jobs and CronJobs
jobs:
  migration:
    enabled: true
    image:
      repository: yourorg/elixir-app
      tag: "2.0.0"
    command: ["bin/elixir_app", "eval", "ElixirApp.Release.migrate()"]
    restartPolicy: OnFailure
    
  seed:
    enabled: false
    image:
      repository: yourorg/elixir-app
      tag: "2.0.0"
    command: ["bin/elixir_app", "eval", "ElixirApp.Release.seed()"]
    restartPolicy: OnFailure

cronJobs:
  cleanup:
    enabled: true
    schedule: "0 2 * * *"
    image:
      repository: yourorg/elixir-app
      tag: "2.0.0"
    command: ["bin/elixir_app", "eval", "ElixirApp.Cleanup.run()"]
    restartPolicy: OnFailure

# Testing and validation
testing:
  enabled: false
  smokeTests:
    image:
      repository: yourorg/elixir-app-tests
      tag: "2.0.0"
    command: ["mix", "test", "--only", "smoke"]

# Security scanning
security:
  podSecurityPolicy:
    enabled: false
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL
  
# Backup configuration
backup:
  enabled: false
  schedule: "0 3 * * *"
  retention: "30d"
  destination: "s3://your-backup-bucket/elixir-app"