{
    "sourceFile": ".claude/commands/auto.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750059420686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750059420686,
            "name": "Commit-0",
            "content": "# SPR: Autonomous AI Agent Operation\n\nGherkin-driven autonomous operation with **dual coordination architectures**, enterprise Scrum at Scale coordination, Claude AI intelligence, and zero-hallucination protocols.\n\n## Pre-Execution Initialization Protocol\n\n**üìñ MANDATORY README REVIEW**: Before any autonomous operation, agents MUST read and understand the coordination system documentation:\n\n```bash\n# REQUIRED: Read coordination system documentation before starting\ncat agent_coordination/README.md\n\n# Verify understanding of dual coordination architectures:\n# 1. Enterprise SAFe Coordination (coordination_helper.sh)\n# 2. Real Agent Process Coordination (real_agent_coordinator.sh)\n```\n\n**üèóÔ∏è Coordination Architecture Awareness**: Agents must understand:\n- **40+ shell commands** available in `coordination_helper.sh`\n- **Real process coordination** via `real_agent_coordinator.sh` \n- **Dual telemetry streams** (enterprise + real agent execution)\n- **Performance characteristics** and **limitations** (especially `flock` dependency)\n- **Environment variables** and **dependencies** required for operation\n\n**üìã Available Command Reference**: Agents have access to comprehensive coordination commands documented in `agent_coordination/README.md` including Enterprise SAFe, Real Agent Process, XAVOS Integration, OpenTelemetry validation, and troubleshooting guidance.\n\n## Anti-Hallucination Protocol\n\n**Gherkin Verification**: `verify_gherkin_capability()` ensures all autonomous actions map to verified feature specifications in 11 feature files.\n\n**Capability Grounding**: Only implement features defined in reactor_workflow_orchestration.feature, agent_coordination.feature, n8n_integration.feature, self_improvement_processes.feature, etc.\n\n**Reality Checking**: Verify file paths, functions, and APIs exist before autonomous execution. **CRITICAL**: Always verify coordination commands exist and work properly before autonomous execution.\n\n## Autonomous Coordination Engine\n\n**üîß Dual Architecture Operation**: Agents operate with both coordination systems as documented in `agent_coordination/README.md`:\n\n**Enterprise SAFe Coordination** (`coordination_helper.sh`):\n- **Agent ID Generation**: `agent_$(date +%s%N)` for nanosecond-precision uniqueness across distributed operations\n- **Work Claiming**: `coordination_helper.sh claim-intelligent <work_type> <description> [priority] [team]` with Claude AI optimization\n- **Progress Tracking**: Atomic state transitions through `pending ‚Üí active ‚Üí completed` with telemetry correlation\n- **Claude Intelligence Integration**: Real-time priority analysis, team optimization, and system health assessment\n\n**Real Agent Process Coordination** (`real_agent_coordinator.sh`):\n- **Distributed Work Queue**: `./real_agent_coordinator.sh init && ./real_agent_coordinator.sh monitor`\n- **Atomic Work Claiming**: `./real_agent_coordinator.sh claim <agent_id> <agent_pid>` with conflict-free execution\n- **Real Process Execution**: Actual work execution with performance measurement and telemetry generation\n- **Coordinated Agent Workers**: `nohup ./coordinated_real_agent_worker.sh > /tmp/agent.log 2>&1 &`\n\n```bash\n# Enterprise SAFe autonomous operations (from README.md)\n./agent_coordination/coordination_helper.sh claim-intelligent \"autonomous_improvement\" \"AI-driven system enhancement\" \"high\" \"autonomous_team\"\n./agent_coordination/coordination_helper.sh claude-analyze-priorities     # AI priority optimization\n./agent_coordination/coordination_helper.sh claude-optimize-assignments  # Team formation analysis\n./agent_coordination/coordination_helper.sh claude-health-analysis       # System health assessment\n\n# Real Agent Process coordination (from README.md)\n./real_agent_coordinator.sh init                     # Initialize distributed work queue\n./real_agent_coordinator.sh monitor                  # Monitor coordination status\n./real_agent_coordinator.sh add \"performance_optimization\" \"high\" \"performance_test\" \"2500\"  # Add work\n\n# Scrum at Scale autonomous events (from README.md)\n./agent_coordination/coordination_helper.sh pi-planning                  # Program Increment planning\n./agent_coordination/coordination_helper.sh system-demo                  # Business value demonstration\n./agent_coordination/coordination_helper.sh inspect-adapt               # Continuous improvement workshop\n./agent_coordination/coordination_helper.sh art-sync                     # Cross-team coordination\n\n# Coordinated agent deployment (from README.md)\nfor i in {1..5}; do\n    nohup ./coordinated_real_agent_worker.sh > /tmp/agent_$i.log 2>&1 &\ndone\n```\n\n**‚ö†Ô∏è Platform Dependencies**: Agents must check for `flock` availability (required for real coordination) and handle graceful fallback as documented in troubleshooting section.\n\n## Autonomous Decision Patterns\n\n**Priority Determination**: Claude AI analysis of system state determines optimal focus areas based on business value and PI objectives.\n\n**Team Formation**: Autonomous agent specialization based on capability analysis: Customer Value (JTBD), System Reliability, Performance Optimization, Innovation Research.\n\n**Work Selection**: Intelligence-driven selection using `claude-recommend-work <type>` with confidence scoring and impact assessment.\n\n**Emergency Response**: Automatic escalation when critical work count > 5 triggers all-hands coordination.\n\n**Innovation Cycles**: Proactive improvement initiation when active work count < 3.\n\n## Implemented System Architecture\n\n**Reactor Workflows**: `/phoenix_app/lib/self_sustaining/workflows/` containing SelfImprovementReactor, N8nIntegrationReactor, APSReactor.\n\n**Reactor Middleware**: `/phoenix_app/lib/self_sustaining/reactor_middleware/` with AgentCoordinationMiddleware (nanosecond coordination), TelemetryMiddleware (OpenTelemetry integration).\n\n**Reactor Steps**: `/phoenix_app/lib/self_sustaining/reactor_steps/` including ParallelImprovementStep (adaptive concurrency), N8nWorkflowStep (automation).\n\n**Coordination System**: `/agent_coordination/` with JSON-based atomic operations, file locking, telemetry integration.\n\n## Quality Gates and Validation\n\n**Compilation**: `mix compile --warnings-as-errors` - zero tolerance for warnings in autonomous operation.\n\n**Testing**: `mix test` - comprehensive test coverage validation before autonomous completion.\n\n**Code Quality**: `mix format --check-formatted && mix credo --strict` - automated quality enforcement.\n\n**Performance**: Benchmark validation through `comprehensive_e2e_benchmarks.exs` and reactor performance testing.\n\n## JTBD Integration Workflows\n\n**Customer Job Discovery**: Autonomous analysis of customer segments and job categories with business value measurement.\n\n**Solution Implementation**: Intelligence-driven solution design with expected outcome tracking and success criteria validation.\n\n**Outcome Optimization**: Performance measurement and iterative improvement based on customer satisfaction and efficiency metrics.\n\n**Portfolio Management**: Epic-level coordination across customer segments with business value optimization.\n\n## Autonomous Execution Patterns\n\n**Focus Area Selection**: AI-driven analysis determines optimal work focus from: reactor, coordination, n8n, ash, performance, telemetry, error-handling.\n\n**Capability Analysis**: Gherkin specification parsing identifies available scenarios and implementation guidance.\n\n**Implementation Execution**: Follow Given-When-Then patterns from verified Gherkin scenarios.\n\n**Continuous Improvement**: Feedback loop with telemetry analysis and performance optimization.\n\n## Success Indicators\n\n**üìä Measured Performance** (from README.md validation):\n- **Enterprise SAFe**: 92.6% operation success rate, 126ms average operation duration, 40+ coordination commands\n- **Real Agent Process**: 5 concurrent agents, 1,700+ telemetry spans, 100% success rate, sub-100ms coordination operations\n- **Zero Conflicts**: Mathematical impossibility of work claim conflicts through nanosecond precision and atomic file locking\n\n**üèóÔ∏è Dual Architecture Health**:\n- **Enterprise SAFe Coordination**: JSON-based atomic operations with Claude AI intelligence integration\n- **Real Process Coordination**: Distributed work queue with actual process execution and performance measurement\n- **Telemetry Completeness**: Dual telemetry streams (enterprise + real execution) with OpenTelemetry integration\n\n**üíº Business Value**: All autonomous decisions optimize for customer outcomes and PI objective achievement with comprehensive coordination system awareness.\n\n**üîß Enterprise Integration**: Full Scrum at Scale event participation with autonomous facilitation plus real agent process execution.\n\n**üìà Observable Operations**: Complete observability through dual telemetry streams, coordination logs, and performance metrics as documented in README.md.\n\n## Pre-Execution Checklist\n\nBefore autonomous operation, agents MUST:\n\n1. **üìñ Read Documentation**: `cat agent_coordination/README.md` - **MANDATORY**\n2. **üîç Verify Coordination Commands**: Test both `coordination_helper.sh` and `real_agent_coordinator.sh` availability\n3. **‚öôÔ∏è Check Dependencies**: Verify `jq`, `python3`, and optional `flock` (for real coordination)\n4. **üèóÔ∏è Understand Architecture**: Comprehend dual coordination systems and their use cases\n5. **üìã Review Command Reference**: Understand 100+ available coordination commands from README.md\n\n## Execution Command\n\n`/project:auto [focus_area]` - Agents autonomously:\n\n1. **FIRST**: Read `agent_coordination/README.md` for complete coordination system understanding\n2. **Initialize**: Set up both Enterprise SAFe and Real Process coordination as needed\n3. **Coordinate**: Use appropriate coordination architecture based on work requirements\n4. **Execute**: Perform improvements with measured performance and telemetry generation\n5. **Monitor**: Track progress through dual telemetry streams and coordination logs\n\n**Coordination Architecture Selection**:\n- **Enterprise SAFe** (`coordination_helper.sh`): For complex workflow coordination, team formation, PI planning\n- **Real Process** (`real_agent_coordinator.sh`): For distributed work execution, performance measurement, conflict-free process coordination\n"
        }
    ]
}