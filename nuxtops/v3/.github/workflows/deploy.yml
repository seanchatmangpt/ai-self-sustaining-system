name: NuxtOps V3 Enterprise Deployment

on:
  push:
    branches: [main, develop, staging]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - canary
          - blue-green
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/nuxtops
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  determine-environment:
    name: Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deployment_type: ${{ steps.env.outputs.deployment_type }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment and deployment strategy
        id: env
        run: |
          # Manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deployment_type=${{ github.event.inputs.deployment_type }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Branch-based environment determination
          case "${{ github.ref_name }}" in
            "main")
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "deployment_type=blue-green" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "deployment_type=rolling" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              ;;
            "develop")
              echo "environment=development" >> $GITHUB_OUTPUT
              echo "deployment_type=rolling" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "environment=development" >> $GITHUB_OUTPUT
              echo "deployment_type=rolling" >> $GITHUB_OUTPUT
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              ;;
          esac

  opentelemetry-validation:
    name: OpenTelemetry E2E Validation
    runs-on: ubuntu-latest
    needs: [determine-environment]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start OpenTelemetry stack
        run: |
          docker-compose -f monitoring/compose.otel.yaml up -d
          sleep 30

      - name: Run comprehensive OpenTelemetry validation
        run: |
          chmod +x scripts/*.sh
          ./scripts/master-trace-orchestrator.sh --verbose

      - name: Upload validation results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: otel-validation-results
          path: |
            *-validation-*.json
            *-orchestration-*.json
            logs/

  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, opentelemetry-validation]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run enterprise deployment
        run: |
          chmod +x scripts/deploy-enterprise-stack.sh
          ./scripts/deploy-enterprise-stack.sh ${{ needs.determine-environment.outputs.environment }}

      - name: Validate deployment health
        run: |
          chmod +x scripts/validate-nuxtops-health.sh
          ./scripts/validate-nuxtops-health.sh ${{ needs.determine-environment.outputs.environment }} --detailed